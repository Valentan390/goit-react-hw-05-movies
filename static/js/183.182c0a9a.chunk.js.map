{"version":3,"file":"static/js/183.182c0a9a.chunk.js","mappings":"sPACA,EAA2B,uBAA3B,EAA6D,uB,oCC6D7D,EAvDa,WACX,IAAQA,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KA6BA,OA3BAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,gHAISC,EAAAA,EAAAA,IAAmBT,GAJ5B,mBAINU,EAJM,EAINA,KACRJ,GAAW,KAEPI,EAAKP,KAAKQ,OAAS,GAPT,wBAQZC,IAAAA,OAAAA,QACE,gEAGFN,GAAW,GAZC,2BAgBdF,EAAQM,EAAKP,MACbG,GAAW,GAjBG,kDAmBdM,IAAAA,OAAAA,QAAwB,+BAnBV,0DAAH,qDAuBfJ,GACD,GAAE,CAACR,KAGF,2BACGK,IAAW,SAACQ,EAAA,EAAD,KACZ,eAAIC,UAAWC,EAAf,SACGZ,EAAKa,KAAI,SAAAC,GACR,OACE,gBAAiBH,UAAWC,EAA5B,WACE,gBACEG,IAAG,yCAAoCD,EAAIE,cAC3CC,IAAG,UAAKH,EAAII,KAAT,gBAEL,4BACE,yBAAG,SAAOJ,EAAII,SACd,yBAAG,cAAYJ,EAAIK,kBAPdL,EAAIM,GAWhB,QAIR,C,iEC3DD,EAA0B,wB,kBCkB1B,EAfe,WACb,OACE,gBAAKT,UAAWC,EAAhB,UACE,SAAC,KAAD,CACES,OAAO,KACPC,MAAM,KACNC,OAAO,IACPC,MAAM,UACNC,UAAU,qBACVC,SAAS,KAIhB,C,+LCfDC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEVC,EACM,oBADNA,EAES,gBAFTA,EAGU,SAHVA,EAIU,WAJVA,EAKU,WAGHC,EAAS,mCAAG,yGAAOC,EAAP,+BAAc,EAAd,SACFJ,EAAAA,EAAAA,IAAA,UAChBE,EADgB,oBACeD,EADf,iBAC+BG,EAD/B,wCADE,cACjBC,EADiB,yBAKhBA,GALgB,2CAAH,qDAQTC,EAAY,mCAAG,WAAOC,GAAP,4FAAcH,EAAd,+BAAqB,EAArB,SACLJ,EAAAA,EAAAA,IAAA,UAChBE,EADgB,oBACkBD,EADlB,iBACkCG,EADlC,kBACgDG,EADhD,wCADK,cACpBF,EADoB,yBAKnBA,GALmB,2CAAH,sDAQZG,EAAkB,mCAAG,WAAMf,GAAN,uFACXO,EAAAA,EAAAA,IAAA,UAChBE,EADgB,YACWT,EADX,oBACyBQ,EADzB,oBADW,cAC1BI,EAD0B,yBAKzBA,GALyB,2CAAH,sDAQlB1B,EAAkB,mCAAG,WAAMc,GAAN,uFACXO,EAAAA,EAAAA,IAAA,iBACTP,GADS,OACJS,EADI,oBAC+BD,EAD/B,oBADW,cAC1BI,EAD0B,yBAKzBA,GALyB,2CAAH,sDAQlBI,EAAkB,mCAAG,WAAOhB,GAAP,4FAAWW,EAAX,+BAAkB,EAAlB,SACXJ,EAAAA,EAAAA,IAAA,iBACTP,GADS,OACJS,EADI,oBAC+BD,EAD/B,gCAC8DG,IAFnD,cAC1BC,EAD0B,yBAKzBA,GALyB,2CAAH,qD","sources":["webpack://react-homework-template/./src/components/cast/Cast.module.css?6cbd","components/cast/Cast.jsx","webpack://react-homework-template/./src/components/loader/Loader.module.css?198e","components/loader/Loader.jsx","components/services/APIservices.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"castList\":\"Cast_castList__1BYq+\",\"castItem\":\"Cast_castItem__mogLp\"};","import { fetchMoviesCredits } from 'components/services/APIservices';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport styles from './Cast.module.css';\nimport Loader from 'components/loader/Loader';\nimport Notiflix from 'notiflix';\n\nconst Cast = () => {\n  const { moviesid } = useParams();\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      // setStatus(fetchStatus.LOADING);\n\n      try {\n        const { data } = await fetchMoviesCredits(moviesid);\n        setLoading(true);\n\n        if (data.cast.length < 1) {\n          Notiflix.Notify.failure(\n            'Sorry, nothing was found for your request. Please try again.'\n          );\n\n          setLoading(false);\n          return;\n        }\n\n        setCast(data.cast);\n        setLoading(false);\n      } catch (error) {\n        Notiflix.Notify.failure('Sorry something went wrong.');\n      }\n    };\n\n    fetchCast();\n  }, [moviesid]);\n\n  return (\n    <div>\n      {loading && <Loader />}\n      <ul className={styles.castList}>\n        {cast.map(cas => {\n          return (\n            <li key={cas.id} className={styles.castItem}>\n              <img\n                src={`https://image.tmdb.org/t/p/w300${cas.profile_path}`}\n                alt={`${cas.name} portrait`}\n              />\n              <div>\n                <p>Name: {cas.name}</p>\n                <p>Character: {cas.character}</p>\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Cast;\n","// extracted by mini-css-extract-plugin\nexport default {\"Spinner\":\"Loader_Spinner__XW-iJ\"};","import React from 'react';\nimport styles from './Loader.module.css';\nimport { ThreeDots } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <div className={styles.Spinner}>\n      <ThreeDots\n        height=\"80\"\n        width=\"80\"\n        radius=\"9\"\n        color=\"#000000\"\n        ariaLabel=\"three-dots-loading\"\n        visible={true}\n      />\n    </div>\n  );\n};\n\nexport default Loader;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'a268e0238f941e7dca8400715164ec05';\n\nconst END_POINTS = {\n  trending: '/trending/all/day',\n  querySearch: '/search/movie',\n  movieDetails: '/movie',\n  movieCredits: '/credits',\n  movieReviews: '/reviews',\n};\n\nexport const getMovies = async (page = 1) => {\n  const result = await axios.get(\n    `${END_POINTS.trending}?api_key=${API_KEY}&page=${page}&language=en-US&include_adult=false`\n  );\n\n  return result;\n};\n\nexport const fetchByQuery = async (query, page = 1) => {\n  const result = await axios.get(\n    `${END_POINTS.querySearch}?api_key=${API_KEY}&page=${page}&query=${query}&language=en-US&include_adult=false`\n  );\n\n  return result;\n};\n\nexport const fetchMoviesDetails = async id => {\n  const result = await axios.get(\n    `${END_POINTS.movieDetails}/${id}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return result;\n};\n\nexport const fetchMoviesCredits = async id => {\n  const result = await axios.get(\n    `/movie/${id}${END_POINTS.movieCredits}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return result;\n};\n\nexport const fetchMoviesReviews = async (id, page = 1) => {\n  const result = await axios.get(\n    `/movie/${id}${END_POINTS.movieReviews}?api_key=${API_KEY}&language=en-US&page=${page}`\n  );\n\n  return result;\n};\n"],"names":["moviesid","useParams","useState","cast","setCast","loading","setLoading","useEffect","fetchCast","fetchMoviesCredits","data","length","Notiflix","Loader","className","styles","map","cas","src","profile_path","alt","name","character","id","height","width","radius","color","ariaLabel","visible","axios","API_KEY","END_POINTS","getMovies","page","result","fetchByQuery","query","fetchMoviesDetails","fetchMoviesReviews"],"sourceRoot":""}